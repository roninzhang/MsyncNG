package com.easemob.msync.ng;

/**
 * Hello world!
 *
 */
public class App 
{
	private static String MR = "==MR=="; //]
	private static String ML = "==ML=="; //[
	private static String LR = "==LR=="; //}
	private static String LL = "==LL=="; //{
    public static void main( String[] args )
    {
    	String str = "[{prometheus,[{vm_memory_collector_metrics, [bytes_total]},{mnesia_collector_metrics, []},{vm_statistics_collector_metrics, [io]},{vm_system_info_collector_metrics, [port_count, process_count]}]},\n" + 
    			"{msync,msyncvalue}]";
    	
//    	str = "[{prometheus,[{vm_memory_collector_metrics, [bytes_total]},{mnesia_collector_metrics, []},{vm_statistics_collector_metrics, [io]},{vm_system_info_collector_metrics, [port_count, process_count]}]},{otter, [{filter_rules,[{[{greater,otter_span_duration,1000000}],[{snapshot_count,[long_span],[otter_span_name]}]},{[],[{snapshot_count,[span_processed],[otter_span_name]},send_to_zipkin]}]},{zipkin_collector_uri, \"http://localhost:9411/api/v1/spans\"},{zipkin_batch_interval_ms, 100},{zipkin_add_host_tag_to_span, {\"lc\", \"hsb\"}},{zipkin_tag_host_port, 6717},{zipkin_tag_host_service, \"msync\"}]},{msync,[{etcdc, [{enable_etcd_service_disc, false}]},{port, 6717},{opentracing_list, [\"user\"]},{opentracing_probability, {one_out_of, 2}},{node_roles_list, [worker_nodes]},{store_node_roles, [{worker_nodes, [<<\"msync@hsb-ali-beijing-mesos-slave3\">>]}]},{node_type, rest_normal},{msync_worker, [worker]},{rest_normal,  [rest_normal_chat_groups, rest_normal_groupchat_groups, worker,{mod,mod_easemob_restart}]},{modules,[{mod_easemob_restart,[]}]},{appkey_traffic_control,[[{name, appkey_traffic_control_login}],[{name, appkey_traffic_control_chat}],[{name, appkey_traffic_control_group_chat},{ticket_speed, 10000000}],[{name, appkey_traffic_control_muc_presence},{ticket_speed, 10000000}]]},{appkey_traffic_control_default,[{ticket_max_factor, 5.0},{ticket_speed, -1}]},{apollo_config_button,shutdown},{apollo_local_config_path,\"./msync.config\"},{apollo_config_server_url,\"10.81.8.250:28080\"},{apollo_appid,\"easemob-im-msync\"},{apollo_cluster_name,\"hsb\"},{apollo_namespace_name,\"application\"},{apollo_path,\"./msync.config\"},{apollo_wait_time, 60000},{apollo_notification_id,-1},{rest_msg,[{redis_chat_topic,[<<\"im:rest:chat\">>]},{redis_groupchat_topic,[<<\"im:rest:groupchat\">>]},{redis_host,<<\"redis\">>},{redis_port,6379}]},{sendmsg_chat_features, [rest_batch_chat_groups, rest_kefu_groups, rest_normal_chat_groups]},{sendmsg_groupchat_features, [rest_batch_groupchat_groups, rest_kefu_groups, rest_normal_groupchat_groups]},{rest_batch_chat_groups, [rest_batch_chat, rest_kefu]},{rest_batch_groupchat_groups, [rest_batch_groupchat]},{rest_kefu_groups, [rest_kefu]},{rest_normal_chat_groups, [rest_normal_chat, rest_kefu]},{rest_normal_groupchat_groups, [rest_normal_groupchat]},{rest_batch_chat, [{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:rest:batch:chat\"}]},{rest_batch_groupchat, [{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:rest:batch:groupchat\"}]},{rest_kefu, [{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:rest:kefu:chat\"}]},{rest_normal_chat, [{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:rest:chat\"}]},{rest_normal_groupchat, [{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:rest:groupchat\"}]},{health_server, [{host, \"localhost\"},{port, \"8080\"},{path, \"/health\"}]},{health_monitor_period, 6000000},{cluster, bcssy},{http_proxy,none},{is_msync, true},{process_queue_warn_len, 200},{odbc_ping_threshold, 100000},{redis_ping_threshold, 100000},{session_ping_threshold, 100000},{conn_num_limit, 100000},{worker_num_limit, 100},{httpc_timeout, 10000},{enable_media_request_transfer, true},{conference_expiration_ms, 15000},{shaper, [{rest,[{normal, 10000}, {batch, 6000}]},{fast,50000},{normal,3000}]},{all_checks, [health_check_conn_num,health_check_kafka,health_check_lager,health_check_process_queue,health_check_redis,health_check_session,health_check_worker_num]},{session_db_type, redis},{session_counter, false},{enable_multi_devices, false},{enable_session_db_hotswap, true},{pid_path, \"/data/apps/var/msync/msync.pid\"},{sock_opts, [{backlog, 4096},{nodelay, true},{recbuf, 4096},{other_options, [{keepalive, true},{sndbuf,4096},{buffer, 1460},{send_timeout_close,true},{exit_on_close,true},{packet_size,4096},{send_timeout, 15000}]}]},{authorized_sock_opts, [{packet_size,65536}]},{user_auth_module, msync_user_with_poolboy},{turnServers,[{<<\"easemob.com\">>, [\"52.52.125.47:3478\"]}]},{media_server_port, 6666},{enable_message_limit_queue, false},{message_limit_queue,[{queue_num, 10},{queue_type, kafka},{kafka_key, kafka_message_limit_queue},{redis_key, message_limit_queue},{redis_topic_prefix, <<\"msync:msg:queue:\">>}]},{mod_message_limit,[{speed,5000},{read, true},{sleep_time, 1000},{rate_list,[{0,0},{2000,0},{2001,80}]},{member_num_to_down_speed,[{0,1000},{1000,30},{3000,10}]},{statistics_expire_time, 1000},{refresh_interval, 60000}]},{enable_message_down_queue, false},{message_down_features, [message_down_readmsg]},{message_down_readmsg, [kafka_message_down_large_chatroom_normal,kafka_message_down_large_chatroom_low,kafka_message_down_large_group_normal]},{message_down_queue,[{speed,100000},{read, true},{sleep_time, 1000},{refresh_interval, 60000},{rate_list,[{0,0},{2000,0},{2001,80}]},{member_num_to_push,10000},{member_num_to_down_speed,[{0,1000},{1000,30},{3000,10},{6000,10}]}]},{store_nodes,[{muc,[]}]}]},{ticktick,[{machine_id, 501 },{ip, \"0.0.0.0\"},{port, 18080}]},{im_thrift,[{services,[conference_service_thrift,rtc_service_thrift,user_service_thrift,groupService_thrift,behavior_service_thrift,text_parse_service_thrift]},{conference_service_thrift,[{service,conference_service_thrift},{host,\"webrtc_conference\"},{port,6996},{options,[{framed,true},{connect_timeout,2000},{recv_timeout,2000},{sockopts,[{keepalive,true}]}]},{pool_size,4},{max_overflow,20}]},{rtc_service_thrift,[{service,rtc_service_thrift},{host,\"10.146.13.210\"},{port,7996},{options,[{framed,true},{connect_timeout,2000},{recv_timeout,2000},{sockopts,[{keepalive,true}]}]},{pool_size,4},{max_overflow,20}]},{user_service_thrift,[{service,user_service_thrift},{host_port_list,[{\"thrift\",9999}]},{options,[{framed,true},{connect_timeout,1000},{recv_timeout,1000},{sockopts,[{keepalive,true}]}]},{strategy,fifo},{pool_size,10},{max_overflow,20}]},{groupService_thrift,[{service,groupService_thrift},{host_port_list,[{\"thrift-group\",10999}]},{options,[{framed,true},{connect_timeout,10000},{recv_timeout,10000},{sockopts,[{keepalive,true}]}]},{pool_size,10},{max_overflow,20}]},{behavior_service_thrift,[{service,behavior_service_thrift},{host,\"antispam\"},{port,9595},{options,[{framed,true},{connect_timeout,1000},{recv_timeout,1000},{sockopts,[{keepalive,true}]}]},{pool_size,4},{max_overflow,20}]},{text_parse_service_thrift,[{service,text_parse_service_thrift},{host,\"antispam\"},{port,8090},{options,[{framed,true},{connect_timeout,1000},{recv_timeout,1000},{sockopts,[{keepalive,true}]}]},{pool_size,4},{max_overflow,20}]}]},{message_store, [{enable_offline_pool, false},{pika_double_write_enable, true},{enable_store_pool, false},{enable_log_kafka_pool, true},{enable_machine_id_register, true},{check_user_cluster, false},{traffic_control,[[{name, traffic_control_login}],[{name, traffic_control_chat}],[{name, traffic_control_group_chat}],[{name, traffic_control_muc_opt}],[{name, traffic_control_muc_presence}],[{name, traffic_control_roster}],[{name, traffic_control_privacy}]]},{traffic_control_default,[{ticket_speed_min,100},{ticket_speed_max,100000},{ticket_add_rate, 0.1},{ticket_del_rate, 0.3},{ticket_max_percent, 0.01},{ticket_timeout, 3000},{qps_interval, 1000}]},{traffic_control_monitor,[{interval,3000},{min_msg_queue_len, 1000},{max_msg_queue_len, 4000}]},{redis_body_read_rule, [{body, old_key, no_compress}]},{redis_body_write_rule, [{body, old_key, no_compress}]},{ssdb_body_read_rule, [{ssdb_body, old_key, no_compress}]},{ssdb_body_write_rule, [{ssdb_body, old_key, no_compress}]},{pika_roster_read_rule, [{roster_pika, old_key, no_compress}]},{pika_roster_write_rule, [{roster_pika, old_key, no_compress}]},{pika_roster_double_write_rule, [{roster_pika, old_key, no_compress},{new_roster_pika, old_key, no_compress}]},{pika_privacy_read_rule, [{roster_pika, old_key, no_compress}]},{pika_privacy_write_rule, [{roster_pika, old_key, no_compress}]},{pika_privacy_double_write_rule, [{roster_pika, old_key, no_compress},{new_roster_pika, old_key, no_compress}]},{statistics,[[{name, statistics_muc_index}],[{name, statistics_muc_cursor}],[{name, statistics_group_presence}],[{name, statistics_chatroom_presence}],[{name, statistics_login}]]},{downgrades,[[{name, easemob_downgrade_presence}]]},{odbc_conn_switch, false},{image_audit_private_key,<<\"MIIBVgIBADANBgkqhkiG9w0BAQEFAASCAUAwggE8AgEAAkEA+O5iWJ3z/B2GZLBBkJO6NE2zIe8d\\r\\n\"\"oOyodJLh1W3+L+JOMHuHvTcZjet5yFHbBQ9/PHtiMSYHOIi7BzPDp0sdAwIDAQABAkEAlqFhf3At\\r\\n\"\"GI0hKsKBGiRaU5YE5G7WBe/Oy6Op5kWFv6DG3j003XMrPQ02qmMuLRhIwzZfiTzmY81uUgsf8FQL\\r\\n\"\"WQIhAPyRkjdaQazmgEpGdUY9p3Hn8xn53T/Sd43dY2Ct70VnAiEA/FApesSnX+99ZDlqCKGjwIph\\r\\n\"\"zag3yMuDn2NFLvd/7gUCICGe7yvXI+70MBezEWFsS6HqEn5euIkKZ0fHNLdl7/f5AiEA6+WismaU\\r\\n\"\"Oiy2JnNLgKBnckevI1FoPnKQL//nGf9Ke2UCIQCQpVsjZyY2y64PiYRUQyImnNQ7kOmXSHysdlYa\\r\\n\"\"vUlLPw==\">>},{kafka_log_worker, easemob_log_worker},{enable_redis_log_outgoing, false},{use_new_index_key, false},{use_new_unread_key, false},{use_new_cursor_key, false},{use_new_index_redis, false},{use_new_session_codis, false},{use_new_http_session, false},{use_new_gmsg_key, false},{use_new_gmsg_redis, false},{use_new_resource_redis, false},{use_new_roster_redis, false},{use_new_privacy_redis, false},{roster_db_type, pika},{enable_roster_cache, true},{privacy_db_type, pika},{enable_privacy_cache, true},{privacy_ttl_keepalive_secs, infinity},{roster_write_pika_and_odbc, false},{double_mobile_resource, false},{mobile_resource, <<\"mobile_mobile\">>},{mobile_backup_resource, <<\"mobile\">>},{double_default_resource, false},{default_resource, <<\".\">>},{backup_resource, <<\"mobile\">>},{enable_multi_devices_roster_and_group, true},{resource_expire_time, 86400000},{platform_resource_len, []},{sys2platform, [{<<\"mobile\">>,<<\"mobile\">>},{<<\"ios\">>,<<\"mobile\">>},{<<\"android\">>,<<\"mobile\">>},{<<\"ipad\">>,<<\"mobile\">>},{<<\"linux\">>,<<\"linux\">>},{<<\"webim\">>,<<\"webim\">>},{<<\"windows\">>,<<\"windows\">>}]},{rest_event,[group_event_topic1,group_event_topic2]},{kafka_group_event_topic1, [{kafka_client, kafka_group_event1},{sleep_time, 1000},{speed, 1000},{read, true}]},{kafka_group_event_topic2, [{kafka_client, kafka_group_event2},{sleep_time, 1000},{speed, 1000},{read, true}]},{group_event_topic1,[{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:groups:event:group\"}]},{group_event_topic2,[{host, \"redis\"},{port, 6379},{db, 0},{topic_name, \"im:groups:event:chatroom\"}]},{id_cache_time, 300},{lager_monitor, false},{app_config_param_list, ['res:len:mobile', 'res:len:webim', use_roster, use_keyword_scan, open_keyword_scan,roster_only, send_timestamp, use_privacy,use_sub_store, use_video, use_audio,use_video_turnserver, use_audio_turnserver, use_group_maxuser_limit,use_offline_msg_limit, use_offline_push, use_offline_kafka,use_receive_kafka, offline_conversation_cover, antispam_send,antispam_receive, muc_presence, muc_presence_async,separate_worker, use_multi_resource, use_multi_devices,send_chatroom_history, muc_receive_odbc, large_group_cursor_section,apns_mute, user_login_disabled, max_sessions,max_sessions_limit, unique_client_msgid, enable_msg_ext_decode,enable_decode_compatible, check_nickname]},{redis, [status, kafka_log, codis_session, ssdb_body, index, body, appconfig, roster, log, muc, privacy, resource, group_msg, unique_msg, message_limit_queue, roam_index, new_roam_index, roster_pika, new_roster_pika, privacy_pika, new_privacy_pika, group_ack]},{group_ack, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 4}]},{status, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 4}]},{roster_pika, [{host, \"pika\"},{port, 8888},{db, 0},{pool_size, 1}]},{new_roster_pika, [{host, \"pika\"},{port, 8889},{db, 0},{pool_size, 1}]},{privacy_pika, [{host, \"pika\"},{port, 8888},{db, 0},{pool_size, 1}]},{new_privacy_pika, [{host, \"pika\"},{port, 8889},{db, 0},{pool_size, 1}]},{log, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{ssdb_body, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{index, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{new_index, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1}]},{resource, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{new_resource, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1}]},{body, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{new_body, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1}]},{roster, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{new_roster, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{kafka_log, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{appconfig, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1}]},{new_appconfig, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1}]},{muc, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{privacy, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{new_privacy, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{codis_session, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{new_codis_session, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{group_msg, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{new_group_msg, [{host, \"redis\"},{port, 6380},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{unique_msg, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{message_limit_queue, [{host, \"redis\"},{port, 6379},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{roam_index, [{host, \"pika\"},{port, 8888},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{new_roam_index, [{host, \"pika\"},{port, 8889},{db, 0},{pool_size, 1},{ttl_keepalive_secs, 86400}]},{kafka_client_default,[{restart_delay_seconds,5},{max_metadata_sock_retry,1},{get_metadata_timeout_seconds,5},{reconnect_cool_down_seconds,1},{query_api_versions, false},{allow_topic_auto_creation,true}]},{kafka_producer_default,[{required_acks,1},{ack_timeout,1000},{partition_buffer_limit, 5120},{partition_onwire_limit, 1},{max_batch_size,1048576},{max_retries, 3},{retry_backoff_ms, 500},{compression, gzip},{max_linger_ms, 0},{max_linger_count, 0},{min_compression_batch_size, 2048}]},{kafka_consumer_default,[{min_bytes, 0},{max_bytes, 1048576},{max_wait_time, 10000},{sleep_timeout, 1000},{prefetch_count, 10000},{begin_offset, earliest},{offset_reset_policy, reset_by_subscriber}]},{kafka_group_default,[{offset_commit_policy, commit_to_kafka_v2},{offset_commit_interval_seconds, 1},{rejoin_delay_seconds, 1},{max_rejoin_attempts, 30}]},{kafka,[kafka_message_limit_queue,kafka_message_log,kafka_group_event1,kafka_group_event2]},{kafka_group_event1,[{host, \"kafka\"},{port, 9092},{topic_name, <<\"im-groups-event-group\">>},{topic_num, 1}]},{kafka_group_event2,[{host, \"kafka\"},{port, 9092},{topic_name, <<\"im-groups-event-chatroom\">>},{topic_num, 1}]},{kafka_message_limit_queue,[{host, \"kafka\"},{port, 9092},{topic_name, <<\"msync-im-message-limit-queue\">>},{topic_num, 10}]},{kafka_message_down_large_chatroom_normal,[{host, \"kafka\"},{port, 9092},{topic_name, <<\"msync-message-down-large-chatroom-normal\">>},{topic_num, 1}]},{kafka_message_down_large_chatroom_low,[{host, \"kafka\"},{port, 9092},{topic_name, <<\"msync-message-down-large-chatroom-low\">>},{topic_num, 1}]},{kafka_message_down_large_group_normal,[{host, \"kafka\"},{port, 9092},{topic_name, <<\"msync-message-down-large-group-normal\">>},{topic_num, 1}]},{kafka_message_log,[{host, \"kafka\"},{port, 9092},{max_linger_ms, 10},{max_linger_count, 100},{pool_size, 2}]},{app_max_sessions, 10000000},{read_undefined_cursor, true},{enable_thrift_group, true},{full_large_group, false},{read_group_cursor, true},{read_group_index, true},{is_push_index_cursor, false},{odbc_shard_conn_switch, false},{enable_mysql_index, false},{enable_mysql_body_write, false},{enable_mysql_body_read, false},{enable_ssdb_body_write, true},{enable_ssdb_body_read, true},{enable_redis_body_write, true},{enable_redis_body_read, true},{ssdb_body_expire_time, 604800},{odbc_type, mysql},{odbc_server,<<\"mysql\">>},{odbc_database,<<\"ejabberd\">>},{odbc_username,<<\"mysql\">>},{odbc_password,<<\"123456\">>},{odbc_port,3306},{odbc_pool_size, 1},{odbc_start_interval, 30},{odbc_shards,[{32,[{port, 3306},{database, <<\"ejabberd\">>},{username, <<\"mysql\">>},{password, <<\"123456\">>},{start_interval, 30},{pool_size, 1}]},{0, [{server, <<\"mysql\">>}] },{1, [{server, <<\"mysql\">>}] },{2, [{server, <<\"mysql\">>}] },{3, [{server, <<\"mysql\">>}] },{4, [{server, <<\"mysql\">>}] },{5, [{server, <<\"mysql\">>}] },{6, [{server, <<\"mysql\">>}] },{7, [{server, <<\"mysql\">>}] },{8, [{server, <<\"mysql\">>}] },{9, [{server, <<\"mysql\">>}] },{10, [{server, <<\"mysql\">>}] },{11, [{server, <<\"mysql\">>}] },{12, [{server, <<\"mysql\">>}] },{13, [{server, <<\"mysql\">>}] },{14, [{server, <<\"mysql\">>}] },{15, [{server, <<\"mysql\">>}] },{16, [{server, <<\"mysql\">>}] },{17, [{server, <<\"mysql\">>}] },{18, [{server, <<\"mysql\">>}] },{19, [{server, <<\"mysql\">>}] },{20, [{server, <<\"mysql\">>}] },{21, [{server, <<\"mysql\">>}] },{22, [{server, <<\"mysql\">>}] },{23, [{server, <<\"mysql\">>}] },{24, [{server, <<\"mysql\">>}] },{25, [{server, <<\"mysql\">>}] },{26, [{server, <<\"mysql\">>}] },{27, [{server, <<\"mysql\">>}] },{28, [{server, <<\"mysql\">>}] },{29, [{server, <<\"mysql\">>}] },{30, [{server, <<\"mysql\">>}] },{31, [{server, <<\"mysql\">>}] }]},{max_fsm_queue, 1000},{odbc_keepalive_interval, 90},{store, [{pool_size, 1}]},{offline, [{pool_size, 1}]},{log_redis, [{redis_topic, \"ejabberd:chat:messages\"},{redis_offline_topic, \"ejabberd:chat:offlines\"},{pool_size, 1}]},{kafka_client_module, brod},{queue_log_module, kafka},{log_kafka, [{kafka_outgoing_msg_topic, <<\"ejabberd-chat-messages\">>},{kafka_incoming_msg_topic, <<\"ejabberd-chat-recvmsgs\">>},{kafka_offline_msg_topic, <<\"ejabberd-chat-offlines\">>},{kafka_incoming_ack_large_group_topic, <<\"im-messages-deliver\">>},{kafka_offline_msg_large_group_topic, <<\"im-messages-offline\">>},{kafka_ackmsg_topic, <<\"im-messages-ack\">>},{kafka_ackmsg_large_group_topic, <<\"im-messages-ack-large-group\">>},{kafka_user_statistics_topic, <<\"im-user-statistics\">>},{kafka_roster_topic, <<\"im-roster\">>},{kafka_broker_host, \"kafka\"},{kafka_broker_port, 9092},{kafka_per_partition_workers, 1},{kafka_pool_size, 1}]}]},{sasl, [{sasl_error_logger, {file, \"/data/apps/opt/msync/log/sasl-error.log\"}},{errlog_type, error},{error_logger_mf_dir, \"/data/apps/opt/msync/log/sasl\"},{error_logger_mf_maxbytes, 10485760},{error_logger_mf_maxfiles, 5}]},{lager, [{ async_threshold, 10},{ async_threshold_window,5},{ handlers ,[  { lager_console_backend, [info, {lager_default_formatter, []}]},{ lager_file_backend, [{file, \"/home/chenyifan/easemob/easemob_dev/msync/test/info.log\"},{level, info},{size, 104857600},{date, \"$D0\"},{count, 10},{high_water_mark, 5000},{sync_on, critical}]},{ lager_file_backend, [{file, \"/home/chenyifan/easemob/easemob_dev/msync/test/error.log\"},{level, error},{count, 10},{high_water_mark, 1000},{sync_on, critical}]}]}]},{erl_om,[{port, 9090},{handlers,[{\"/ejabberd_om\", {erl_om_handler_esp, handle,[{root,\"/data/apps/opt/erl_tool/ejabberd\"},{drop,2}]}},{\"/common_om\", {erl_om_handler_esp, handle,[{root,\"/data/apps/opt/erl_tool/common\"},{drop,2}]}},{\"/msync_om\", {erl_om_handler_esp, handle,[{root,\"/data/apps/opt/erl_tool/msync\"},{drop,2}]}}]}]},{etcdc, [{enable_etcd_service_disc, false},{etcd_server_list, \"172.16.0.161:2379,172.16.0.163:2379,172.16.0.164:2379\"},{client_retry_times, 3},{global_machine_id_key, \"/imstest/ejabberd/globalmachineid\"},{global_machine_id_start, 1},{msync_machine_id_prefix, \"/imstest/msync/machinetoid\"},{msync_id_machine_prefix, \"/imstest/msync/idtomachine\"},{node_heartbeat_interval, 2000},{update_etcd_cache_interval, 3000},{ejabberd_storenode_prefix, [\"/imstest/vip1/ejabberd/storenode/muc\"]},{msync_node_prefix, [\"/imstest/vip1/msync/node/all\"]},{machineid_disc_file, \"./filename\"},{etcd_config_enable_applist, [msync, im_thrift, message_store, brod]},{etcd_config_backup_file_dir, \"./config_back_dir/\"},{etcd_config_prefix, \"/imstest/vip1/msync/config/worker\"},{enable_etcd_config, false}]},{eredis, [{hibernate_timeout, 1000}]}]";
    	String result = getString(str).replace(MR, "]").replace(ML, "[").replace(LR, "}").replace(LL, "{");
    	System.out.println("=========>" + result);
    }
    
    public static String getString(String str){
    	int indexr = str.indexOf("]");
    	if(indexr == -1) {
    		return str;
    	}
    	String sub = str.substring(0, indexr+1);
    	int indexl = sub.lastIndexOf("[");
    	if(indexl == -1) {
    		throw new RuntimeException("String is illegal");
    	}
    	String dest = str.substring(indexl, indexr+1);
    	System.out.println("dest================>" + dest);
    	String change = dest.replace("[", "").replace("]", "");
    	if(change.startsWith("{")) {
    		String[] kvStr = change.split("}");
    		for(int i = 0;i < kvStr.length; i++) {
    			if(kvStr[i].startsWith(",")) {
    				kvStr[i] = kvStr[i].substring(1).replace("{", "");
    			} else {
    				kvStr[i] = kvStr[i].replace("{", "");
    			}
    		}
    		sortString(kvStr);
    		StringBuilder builder = new StringBuilder();
    		for(int i = 0; i < kvStr.length; i++) {
    			if(i == kvStr.length -1) {
    				builder.append(LL + kvStr[i] + LR);
    			} else {
    				builder.append(LL + kvStr[i] + LR + ",");
    			}
    		}
    		String builderStr = builder.toString();
    		System.out.println(ML + builderStr.substring(0, builderStr.length()) + MR);
    		str = str.replace(dest, ML + builderStr.substring(0, builderStr.length()) + MR);
    		return getString(str);
    	} else {
    		String destStr = dest.replace("[", ML).replace("]", MR);
    		System.out.println(dest.replace("[", ML).replace("]", MR));
    		str = str.replace(dest, destStr);
    	}
        return getString(str);
    }
    
    public static void sortString(String[] arr) {
    	 
        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j < arr.length; j++) {
 
                if(arr[i].compareTo(arr[j])>0)//字符串比较用compareTo方法
                    swap(arr,i,j);
            }
        }
    }
 
    private static void swap(String[] arr, int i, int j) {
        String temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
